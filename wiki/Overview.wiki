#summary A simple overview of the recent printing changes for openSUSE 10.3.

= Introduction =

The purpose of this project is to improve the desktop printing experience.  

= cups-autoconfig =

*Workflow*

This is a smally utility that runs, via a HAL callout, whenever a local printer is added or removed.  It gathers information via HAL, CUPS, and the CUPS backends to determine the appropriate action.

Settings for this utility are controlled via /etc/sysconfig/printers.  It contains the following values:

CUPS_AUTOCONFIG_ENABLE - Controls local printers being auto-configured on addition.

CUPS_AUTOCONFIG_DISABLE - Controls local printers being disabled on removal.

CUPS_AUTOCONFIG_DEBUG - Controls debugging output /var/log/cups-autoconfig.log.

CUPS_AUTOCONFIG_PRINTER_POLICY: The name of the CUPS policy to assign to newly configured printers.

When a local printer is added to the system cups-autoconfig determines if the printer is already configured.  If the printer is configured then the printer is enabled.  If the printer is not configured then cups-autoconfig attempts to select the appropriate driver for the new printer and, if successful, creates a new print queue.  If the CUPS_AUTOCONFIG_PRINTER_POLICY variable is set it will assign the named policy to the new printer.

When a local printer is removed the CUPS_AUTOCONFIG_DISABLE variable is consulted.  If the variable is set to "yes" then the printer is disabled.

*DBUS Signals* 

Results of cups-autoconfig operations are reported via DBUS messages on the System bus.  If a new printer is successfully configured then a PrinterInfo message is sent via the org.cups.CupsAutoconfig interface.  If configuration fails (unable to find a matching driver, adding the queue fails, etc) then a PrinterConfigRequired message is sent using the same interface.  Policy applications running in the user's session should watch for these messages and take appropriate action.  See the gnome-volume-manager section for details.

= Removal of the HAL backend from cups-backends =

Unfortunately, the HAL CUPS backend needs to be removed.  Ideally, HAL would be used for all hardware detection, but using the HAL backend complicates the process without buying us anything.  The usb backend is what is supported upstream and has to be supported in openSUSE.  Both backends detect the same printers and require complicated uri mapping schemes to avoid ambiguities.  This is more work that it's worth.

= CUPS Changes =

One of the major requirements for this project was to allow local users to perform reasonable actions (add, modify, remove, etc) on local printers.  Policies were added to CUPS 1.2, which is what we decided to use for this.  A few small changes to CUPS were required in order to smoothly integrate policy support.

*A relaxed policy*

A new CUPS policy has been defined to allow normal users to perform operations on local printers.  The policy allows users to add new printers, remove existing printers, pause printers, resume printers, and modify printer attributes.  The is the default policy used by cups-autoconfig for new local printers.

*Domain socket authentication*

The CUPS policy layer handles authorization, but not authentication.  Support was added to CUPS to retrieve the SO_PEERCRED from the local CUPS domain socket in order to verify the identity of the user performing an IPP operation.  This allows users to perform an operation on local printers without typing their password again.  This patch has been sent upstream by Tim Waugh, but is not yet accepted.  It looks like it will make it for CUPS 1.3.  It works well for CUPS 1.2 though.

*Policy query IPP extension*

Although CUPS has support for policies it doesn't have a reasonable way to figure out if a  user can perform an action given a policy.  This is required to correctly initialize a graphical printing tool, like gnome-cups-manager.  A new CUPS IPP extension has been added, CUPS_IS_AUTHORIZED.  This extension provides a way to determine if a user can perform a set of actions for a given policy.  The interface was designed to be IPC friendly to avoid a high volume of IPP calls.

= libgnomecups Changes =

A small patch was added to support querying and caching the permissions for several operations for all available policies on the local machine.  The patch extends the current libgnomecups API to allow clients to check permission for a given action

There was a small bug fix to correctly find the user's lpoptions file.

There was a small bug fix to set the CUPS password callback for all threads in the thread pool, not just the main thread.  Without this fix threads will use the default callback, which just blocks for input on standard in.  Not good.

= gnome-cups-manager Changes =

*Using the new policy API*

gnome-cups-manager now uses policy information to maintain the UI's appearance.  If the user isn't allowed to pause the selected printer then the pause menu entry is insensitive.  If the users launches gnome-cups-add, but lacks permissions to add a new printer then it's launched with gnomesu.  If a users clicks on a print job to cancel it, but lacks permissions to do so then the cancel menu entry will be insensitive.

*Removing the silly admin widgets*

All "Become Administrator" widgets have been removed.  These looked silly and aren't needed anymore.

*Fixing the authentication callback*

A small change was made to gnome-cups-add to make the add_printer operation asynchronous.  Depending on the policy configuration, a user may be prompted for credentials to perform a given operation.  gnome-cups-add was attempting to add the printer synchronously, which was blocking the main gtk thread, which blocked the display of the authentication dialog.  This is fixed now.

= gnome-volume-manager Changes =

A small patch was added to gnome-volume-manager to make it aware of the previously mentioned messages.  If it receives a PrinterInfo message then it uses libnotify to display a message to user letting them know that a new printer has been configured.  If it receives a PrinterConfigRequired message then it will run it's printer configuration tool so the user can take manual action.

= TODO =

Lots and lots of testing.







